source("~/.active-rstudio-document", echo=TRUE)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
a <- 1
b <- 3
seq(a, b, length.out = (n + 1))
n <- 5
seq(a, b, length.out = (n + 1))
seq(a, b, length.out = (n))
?tolower
tolower(trapezoid)
tolower("trapezoid")
tolower("TRAPEZOID")
upper("words")
seq(a, b, length.out = (n))
devtools::document()
devtools::load_all()
integrateIt((x^2), x1 = 1, x2 = 10, 10, trapezoid)
integrateIt((x^2), x1 = 1, x_n = 10, 10, trapezoid)
devtools::document()
devtools::load_all()
integrateIt(x^2, 1, 10, 10, trapezoid)
my_func <- function(fun,x1,x_n,n,type){
.xvalues <- seq(x1, x_n, length.out = (n))
if(rule == "trapezoid"){
.intg <- (((x_n-x1)/n)/2)*(fun(.xvalues[1])) + sum(2*(fun(.xvalues[2:(n-1)]))) + fun(.xvalues[n])
.class <- new("Trapezoid",
fun = fun,
x = .xvalues,
y = fun(.xvalues),
x1 = x1,
x_n = x_n,
n = n,
intg = .intg,
)
}
else {
stop("please enter simpson or trapezoid")
}
# Return the list of values requested
return(list(Type = .class, integral = .intg, values = as.data.frame(cbind(.class@x, .class@y))))
}
my_func(x^2, 1, 10, 10, trapezoid)
my_func(x^2, 1, 10, 10, "trapezoid")
my_func <- function(fun,x1,x_n,n,type){
.xvalues <- seq(x1, x_n, length.out = (n))
if(type == "trapezoid"){
.intg <- (((x_n-x1)/n)/2)*(fun(.xvalues[1])) + sum(2*(fun(.xvalues[2:(n-1)]))) + fun(.xvalues[n])
.class <- new("Trapezoid",
fun = fun,
x = .xvalues,
y = fun(.xvalues),
x1 = x1,
x_n = x_n,
n = n,
intg = .intg,
)
}
else {
stop("please enter simpson or trapezoid")
}
# Return the list of values requested
return(list(Type = .class, integral = .intg, values = as.data.frame(cbind(.class@x, .class@y))))
}
my_func(x^2, 1, 10, 10, trapezoid)
my_func(x^2, 1, 10, 10, "trapezoid")
my_func <- function(fun,x1,x_n,n,type){
my_func <- function(fun,x1,x_n,n,type){
.xvalues <- seq(x1, x_n, length.out = (n))
if(type == "trapezoid"){
.intg <- (((x_n-x1)/n)/2)*(fun(.xvalues[1])) + sum(2*(fun(.xvalues[2:(n-1)]))) + fun(.xvalues[n])
return(.intg)
)
}
my_func <- function(fun,x1,x_n,n,type){
.xvalues <- seq(x1, x_n, length.out = (n))
if(type == "trapezoid"){
.intg <- (((x_n-x1)/n)/2)*(fun(.xvalues[1])) + sum(2*(fun(.xvalues[2:(n-1)]))) + fun(.xvalues[n])
return(.intg)
)
}
}
my_func <- function(fun,x1,x_n,n,type){
.xvalues <- seq(x1, x_n, length.out = (n))
if(type == "trapezoid"){
.intg <- (((x_n-x1)/n)/2)*(fun(.xvalues[1])) + sum(2*(fun(.xvalues[2:(n-1)]))) + fun(.xvalues[n])
return(.intg)
}
}
my_func(x^2, 1, 10, 10, "trapezoid")
traceback()
my_func <- function(fun,x1,x_n,n,type){
.xvalues <- seq(x1, x_n, length.out = (n))
if(type == "trapezoid"){
.intg <- (((x_n-x1)/n)/2)*(fun(.xvalues[1])) + sum(2*(fun(.xvalues[2:(n-1)]))) + fun(.xvalues[n])
return(.intg)
}
}
my_func(x^2, 1, 10, 10, "trapezoid")
my_func(x^2,1, 3, 1, 10, 10, "trapezoid")
my_func(x^2, 1, 10, 10, "trapezoid")
my_func <- function(fun,x1,x_n,n,type){
xvalues <- seq(x1, x_n, length.out = (n))
if(type == "trapezoid"){
intg <- (((x_n-x1)/n)/2)*(fun(.xvalues[1])) + sum(2*(fun(.xvalues[2:(n-1)]))) + fun(.xvalues[n])
return(intg)
}
}
my_func(x^2, 1, 10, 10, "trapezoid")
my_func <- function(fun,x1,x_n,n,type){
xvalues <- seq(x1, x_n, length.out = (n))
if(type == "trapezoid"){
intg <- (((x_n-x1)/n)/2)*(fun(xvalues[1])) + sum(2*(fun(xvalues[2:(n-1)]))) + fun(xvalues[n])
return(intg)
}
}
my_func(x^2, 1, 10, 10, "trapezoid")
funcx <- function(x){x^2}
function(fun,x1,x_n,n,type){
.xvalues <- seq(x1, x_n, length.out = (n))
if(rule == "trapezoid"){
.intg <- (((x_n-x1)/n)/2)*(fun(.xvalues[1])) + sum(2*(fun(.xvalues[2:(n-1)]))) + fun(.xvalues[n])
.class <- new("Trapezoid",
fun = fun,
x = .xvalues,
y = fun(.xvalues),
x1 = x1,
x_n = x_n,
n = n,
intg = .intg,
)
}
else {
stop("please enter simpson or trapezoid")
}
# Return the list of values requested
return(list(Type = .class, integral = .intg, values = as.data.frame(cbind(.class@x, .class@y))))
}
my_func <- function(fun,x1,x_n,n,type){
.xvalues <- seq(x1, x_n, length.out = (n))
if(rule == "trapezoid"){
.intg <- (((x_n-x1)/n)/2)*(fun(.xvalues[1])) + sum(2*(fun(.xvalues[2:(n-1)]))) + fun(.xvalues[n])
.class <- new("Trapezoid",
fun = fun,
x = .xvalues,
y = fun(.xvalues),
x1 = x1,
x_n = x_n,
n = n,
intg = .intg,
)
}
else {
stop("please enter simpson or trapezoid")
}
# Return the list of values requested
return(list(Type = .class, integral = .intg, values = as.data.frame(cbind(.class@x, .class@y))))
}
funcx <- function(x){x^2}
my_func(funcx, 1, 10, 10, "trapezoid")
my_func <- function(fun,x1,x_n,n,type){
.xvalues <- seq(x1, x_n, length.out = (n))
if(type == "trapezoid"){
.intg <- (((x_n-x1)/n)/2)*(fun(.xvalues[1])) + sum(2*(fun(.xvalues[2:(n-1)]))) + fun(.xvalues[n])
.class <- new("Trapezoid",
fun = fun,
x = .xvalues,
y = fun(.xvalues),
x1 = x1,
x_n = x_n,
n = n,
intg = .intg,
)
}
else {
stop("please enter simpson or trapezoid")
}
# Return the list of values requested
return(list(Type = .class, integral = .intg, values = as.data.frame(cbind(.class@x, .class@y))))
}
my_func(funcx, 1, 10, 10, "trapezoid")
devtools::document()
devtools::load_all()
funcx <- function(x){x^2}
integrateIt(funcx, 1, 10, 10, "trapezoid")
integrateIt(funcx, 1, 10, 10, "Trapezoid")
t
integrateIt(funcx, 1, 10, 10, "trapezoid")
my_func <- function(fun,x1,x_n,n,type){
.xvalues <- seq(x1, x_n, length.out = (n))
if(type == "trapezoid"){
.intg <- (((x_n-x1)/n)/2)*(fun(.xvalues[1])) + sum(2*(fun(.xvalues[2:(n-1)]))) + fun(.xvalues[n])
.class <- new("Trapezoid",
fun = fun,
x = .xvalues,
y = fun(.xvalues),
x1 = x1,
x_n = x_n,
n = n,
intg = .intg,
)
}
else {
stop("please enter simpson or trapezoid")
}
# Return the list of values requested
return(list(Type = .class, integral = .intg, values = as.data.frame(cbind(.class@x, .class@y))))
}
my_func <- function(fun,x1,x_n,n,type){
.xvalues <- seq(x1, x_n, length.out = (n))
if(type == "trapezoid"){
.intg <- (((x_n-x1)/n)/2)*(fun(.xvalues[1])) + sum(2*(fun(.xvalues[2:(n-1)]))) + fun(.xvalues[n])
.class <- new("Trapezoid",
fun = fun,
x = .xvalues,
y = fun(.xvalues),
x1 = x1,
x_n = x_n,
n = n,
intg = .intg,
)
}
else {
stop("please enter simpson or trapezoid")
}
# Return the list of values requested
return(list(Type = .class, integral = .intg, values = as.data.frame(cbind(.class@x, .class@y))))
}
my_func(funx,1, 10, 10, "trapezoid")
my_func(funcx,1, 10, 10, "trapezoid")
setClass(
Class = "Trapezoid",
representation = representation(
fun = "function",
x = "numeric",
y = "numeric",
x1 = "numeric",
x_n = "numeric",
n = "numeric",
intg = "numeric"
),
prototype = prototype(
fun = function(x) {
return(x)
},
x = NA_real_,
y = NA_real_,
x1 = NA_real_,
x_n = NA_real_,
n = NA_real_,
intg = NA_real_
)
)
setValidity("Trapezoid", function(object){
#here I'm just running one validity test to see if x and y are of equal length
if(length(object@x) != length(object@y)){
stop("@x and @y are not the same length")
}
}
)
#' @export
setMethod(
"initialize", "Trapezoid",
function(.Object,...){
value <- callNextMethod()
validObject(value)
return(value)
}
)
my_func <- function(fun,x1,x_n,n,type){
.xvalues <- seq(x1, x_n, length.out = (n))
if(type == "trapezoid"){
.intg <- (((x_n-x1)/n)/2)*(fun(.xvalues[1])) + sum(2*(fun(.xvalues[2:(n-1)]))) + fun(.xvalues[n])
.class <- new("Trapezoid",
fun = fun,
x = .xvalues,
y = fun(.xvalues),
x1 = x1,
x_n = x_n,
n = n,
intg = .intg,
)
}
else {
stop("please enter simpson or trapezoid")
}
# Return the list of values requested
return(list(Type = .class, integral = .intg, values = as.data.frame(cbind(.class@x, .class@y))))
}
my_func(funcx,1, 10, 10, "trapezoid")
my_func <- function(fun,x1,x_n,n,type){
.xvalues <- seq(x1, x_n, length.out = (n))
if(type == "trapezoid"){
.intg <- (((x_n-x1)/n)/2)*(fun(.xvalues[1])) + sum(2*(fun(.xvalues[2:(n-1)]))) + fun(.xvalues[n])
}
else {
stop("please enter simpson or trapezoid")
}
# Return the list of values requested
return(list(integral = .intg, values = as.data.frame(cbind(.class@x, .class@y))))
}
my_func(funcx,1, 10, 10, "trapezoid")
my_func <- function(fun,x1,x_n,n,type){
.xvalues <- seq(x1, x_n, length.out = (n))
if(type == "trapezoid"){
.intg <- (((x_n-x1)/n)/2)*(fun(.xvalues[1])) + sum(2*(fun(.xvalues[2:(n-1)]))) + fun(.xvalues[n])
}
else {
stop("please enter simpson or trapezoid")
}
# Return the list of values requested
return(list(integral = .intg, values = as.data.frame(cbind(.xvalues, fun(.xvalues)))))
}
my_func(funcx,1, 10, 10, "trapezoid")
# Return the list of values requested
return(list(integral = .intg, values = as.data.frame(cbind(.xvalues, "y" = fun(.xvalues)))))
my_func <- function(fun,x1,x_n,n,type){
.xvalues <- seq(x1, x_n, length.out = (n))
if(type == "trapezoid"){
.intg <- (((x_n-x1)/n)/2)*(fun(.xvalues[1])) + sum(2*(fun(.xvalues[2:(n-1)]))) + fun(.xvalues[n])
}
else {
stop("please enter simpson or trapezoid")
}
# Return the list of values requested
return(list(integral = .intg, values = as.data.frame(cbind(.xvalues, "y" = fun(.xvalues)))))
}
my_func(funcx,1, 10, 10, "trapezoid")
my_func <- function(fun,x1,x_n,n,type){
.xvalues <- seq(x1, x_n, length.out = (n))
if(type == "trapezoid"){
.intg <- (((x_n-x1)/n)/2)*(fun(.xvalues[1])) + sum(2*(fun(.xvalues[2:(n-1)]))) + fun(.xvalues[n])
}
else {
stop("please enter simpson or trapezoid")
}
# Return the list of values requested
return(list(integral = .intg, values = as.data.frame(cbind("x" = .xvalues, "y" = fun(.xvalues)))))
}
my_func(funcx,1, 10, 10, "trapezoid")
my_func <- function(fun,x1,x_n,n,type){
.xvalues <- seq(x1, x_n, length.out = (n))
if(type == "trapezoid"){
.intg <- (((x_n-x1)/n)/2)*(fun(.xvalues[1])) + sum(2*(fun(.xvalues[2:(n-1)]))) + fun(.xvalues[n])
.class <- new("Trapezoid",
fun = fun,
x = .xvalues,
y = fun(.xvalues),
x1 = x1,
x_n = x_n,
n = n,
intg = .intg,
)
}
else {
stop("please enter simpson or trapezoid")
}
# Return the list of values requested
return(list(integral = .intg, values = as.data.frame(cbind("x" = .xvalues, "y" = fun(.xvalues)))))
}
my_func(funcx,1, 10, 10, "trapezoid")
devtools::document()
devtools::install()
devtools:install()
devtools::install()
integrateIt(funcx, 1, 10, 10, "trapezoid")
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::install()
funcx <- function(x){x^2}
integrateIt::integrateIt(funcx, 1, 10, 10, "trapezoid")
devtools::document()
devtools::intall()
devtools::install()
devtools::load_all()
integrateIt(funcx, 1, 10, 10, "trapezoid")
setwd("~/Documents/Research/Data")
